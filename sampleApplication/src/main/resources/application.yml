server:
  port: 0 # 0은 랜덤으로 포트번호를 부여한다.

spring:
  application:
    name: user-service
  # user-service 에 변경 요청사항이 들어오면 요청사항을 받았다고 rabbitmq에 통보를 해주고
  # rabbitmq에 등록되어진 또 다른 마이크로 서비스에 그 정보를 push한다.
  # 즉, 각 마이크로 서비스가 클라이언트 역할도 같이 한다.
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:testMsaDb  # jdbc url
##    username:
##    password:

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true # fetch-registry? Eureka ????? ?????? ??? ????? ??? ???? ???? ?????. true? ????, ??? ??? ???? ????.
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka # 유레카에 등록한다. (127.0.0.1 = localhost)

greeting:
  message: Welcome to thr Simple E-commerce

logging:
  level:
    com.example.userservice.clent: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh

#token:
#  expiration_time: 86400000 # 하루짜리 토큰
#  secret: user_token