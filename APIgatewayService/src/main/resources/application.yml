server:
  port: 8000

eureka:
  client: # eureka 클라이언트 등록
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter  # GlobalFilter 등록
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE #
#          predicates: # 조건절이다.
#            - Path=/user-service/** #
        - id: user-service
          uri: lb://USER-SERVICE #
          predicates: # 조건절이다.
            - Path=/user-service/login  # 로그인
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
          # /user-service/(?<segment>.*) 이런 형식의 데이터가 들어오면 /$\{segment} 형식으로 바꾸겠다.
        - id: user-service
          uri: lb://USER-SERVICE #
          predicates: # 조건절이다.
            - Path=/user-service/users  # 회원가입
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE #
          predicates: # 조건절이다.
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
            # /user-service/** 로 들어오는 건 위에 따로 표시한 /login(로그인)과 /users(회원가입)를 제외하고 AuthorizationHeaderFilter 를 거친다.
            # 즉, 인증이 필요없는 로그인과 회원가입은 AuthorizationHeaderFilter를 적용시키지 않았고 나머지는 적용시켰다.

        - id: user-service
          uri: lb://USER-SERVICE
          predicates: # 조건절이다.
            - Path=/user-service/actuator/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE #
          predicates: # 조건절이다.
            - Path=/catalog-service/** # 이 모든 요청에 대해서 lb://CATALOG-SERVICE 여기로 가라
        - id: order-service
          uri: lb://ORDER-SERVICE # order-service 의 application.yml에 등록된 spring:application:name: order-service
          predicates: # 조건절이다.
            - Path=/order-service/** # 이 모든 요청에 대해서 lb://CATALOG-SERVICE 여기로 가라
        - id: first-service
          uri: lb://MY-FIRST-SERVICE # application 이름을 적는다. discovery service안에 포함되어 있는 인스턴스 이름을 찾겠다.
          predicates: # 조건절이다.
            - Path=/first-service/**  # 사용자가 이걸호출하면 위에 uri로 간다.
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-request, first-response-header2
            - CustomFilter  # CustomFilter 등록
        - id: second-service
          uri: lb://MY-SECOND-SERVICE # application 이름을 적는다. discovery service안에 포함되어 있는 인스턴스 이름을 찾겠다.
          predicates: # 조건절이다.
            - Path=/second-service/** # 사용자가 이걸호출하면 위에 uri로 간다.
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-request, second-response-header2
            - name : CustomFilter  # CustomFilter 등록
            - name : LoggingFilter  # LoggingFilter 등록
              args:
                baseMessage: Hi, there.
                preLogger: true
                postLogger: true

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace

token:
  secret: user_token